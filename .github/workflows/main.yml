name: Build and Deploy to AWS

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3


      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 2: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 3: Build and push Docker image to AWS ECR
      - name: Build and push Docker image
        env:
          AWS_REGION: us-east-1
          IMAGE_REPO_NAME: loanify-repo
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Create the ECR repository if it doesn't exist
          aws ecr create-repository --repository-name $IMAGE_REPO_NAME || true
          
          # Build and tag the Docker image
          docker build -t $IMAGE_REPO_NAME:$IMAGE_TAG .
          docker tag $IMAGE_REPO_NAME:$IMAGE_TAG $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG
          
          # Push the image to ECR
          docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_REPO_NAME:$IMAGE_TAG

  deploy:
    needs: build
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v3


       # Step 2: Configure AWS credentials (again for the deploy job since it didnt have configure credentials)
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1 
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} 
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      # Step 4: Configure AWS credentials and checking S3 bucket exist to store terraform state
      - name: Ensure Terraform backend S3 bucket exists
        run: |
          aws s3api head-bucket --bucket my-terraform-state-bobby || \
          aws s3api create-bucket --bucket my-terraform-state-bobby --region us-east-1


      # Step 5: Lint Terraform code
      - name: Run TFLint
        run: |
          curl -sLo tflint.zip https://github.com/terraform-linters/tflint/releases/download/v0.46.1/tflint_linux_amd64.zip
           unzip tflint.zip -d /usr/local/bin/
           tflint --version
           tflint --init
           tflint
    
      # Step 6: Run tfsec for security analysis
      - name: Run tfsec
        run: |
          curl -sLo tfsec https://github.com/aquasecurity/tfsec/releases/download/v1.28.1/tfsec-linux-amd64
              chmod +x tfsec
              mv tfsec /usr/local/bin/
              tfsec --version
              tfsec .
    

      # Step 7: Initialize Terraform
      - name: Terraform Init
        run: terraform -chdir=terraform init

      # Step 8: Apply Terraform changes
      - name: Terraform Apply
        run: terraform apply -auto-approve -chdir=terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: us-east-1
